def is_valid(rooks, row, col):
    """Ki·ªÉm tra c√≥ ƒë·∫∑t qu√¢n xe h·ª£p l·ªá kh√¥ng"""
    for (r, c) in rooks:
        if r == row or c == col:
            return False
    return True


def generate_next_states(rooks, n):
    """Sinh c√°c tr·∫°ng th√°i ti·∫øp theo h·ª£p l·ªá"""
    next_states = []
    for r in range(n):
        for c in range(n):
            if (r, c) not in rooks and is_valid(rooks, r, c):
                next_states.append(rooks + [(r, c)])
    return next_states


def heuristic(state, target):
    """H√†m ƒë√°nh gi√°: c√†ng √≠t qu√¢n sai v·ªã tr√≠ c√†ng t·ªët"""
    return len(target) - sum([1 for r in state if r in target])


def beam_search(target_rooks, N, beam_width=3):
    """
    Thu·∫≠t to√°n Beam Search ƒë·ªÉ s·∫Øp qu√¢n gi·ªëng target_rooks.
    Tr·∫£ v·ªÅ danh s√°ch 'history' g·ªìm c√°c beam qua t·ª´ng b∆∞·ªõc ƒë·ªÉ hi·ªÉn th·ªã.
    """
    frontier = [[]]  # b·∫Øt ƒë·∫ßu t·ª´ tr·∫°ng th√°i r·ªóng
    history = []     # l∆∞u danh s√°ch c√°c beam theo t·ª´ng v√≤ng l·∫∑p

    while frontier:
        new_frontier = []
        history.append(frontier.copy())  # üü¢ L∆∞u to√†n b·ªô beam hi·ªán t·∫°i

        # ki·ªÉm tra xem ƒë√£ ƒë·∫°t m·ª•c ti√™u ch∆∞a
        for state in frontier:
            if state == target_rooks:
                history.append([state])
                return history

        # sinh t·∫•t c·∫£ tr·∫°ng th√°i con h·ª£p l·ªá t·ª´ beam hi·ªán t·∫°i
        for state in frontier:
            next_states = generate_next_states(state, N)
            new_frontier.extend(next_states)

        # n·∫øu c√≥ nhi·ªÅu h∆°n beam_width th√¨ ch·ªâ gi·ªØ top-k theo heuristic
        if new_frontier:
            new_frontier.sort(key=lambda x: heuristic(x, target_rooks))
            frontier = new_frontier[:beam_width]
        else:
            break

    return history
